var mongoose = require('mongoose');
var Schema = mongoose.Schema;

mongoose.Promise = global.Promise;
mongoose.connect('mongodb://localhost:27017/TodoApp');

var toySchema = new Schema({
  text: {
    type: String,
    required: true,
    unique: true
  },
  phone: {
        type: String,
        validate: {
          validator: function(v) {
            return /\d{3}-\d{3}-\d{4}/.test(v);
          },
          message: '{VALUE} is not a valid phone number!'
        } //,
        //required: [true, 'User phone number required']
  },
  completed: {
    type: Boolean,
    default: false
  },
  completedAt: {
    type: Number,
    required: [true, 'Why no bacon?'],
    min: [6, 'Too few eggs'],
    max: 12,
    default: 6
  },
  color: {
    type: String,
     validate: function(value) {
       return /blue|green|white|red|orange|periwinkle/i.test(value);
     }
  }
});

var Todo = mongoose.model('Todo', toySchema);

var newTodo = new Todo({
  text: 'Cook dinner ccc'
});

newTodo.save().then((doc) => {
  console.log('Saved todo', doc);
}, (err) => {
  console.log('Unable to save todo', err);
  // assert.equal(err.errors.color.message, 'Color `grease` not valid');
  //     assert.equal(err.errors.color.kind, 'Invalid color');
  //     assert.equal(err.errors.color.path, 'color');
  //     assert.equal(err.errors.color.value, 'grease');
  //     assert.equal(err.name, 'ValidationError');
});

// var otherTodo = new Todo({
//   text: 'Feed the cat',
//   completed: true,
//   completedAt: 123
// });
//
// otherTodo.save().then((doc) => {
//   console.log(JSON.stringify(doc, undefined, 2));
// }, (e) => {
//   console.log('Unable to save', e);
// });
